{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "AdvWorksWWIADF777"
		},
		"AdvWorksBlobLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AdvWorksBlobLS'"
		},
		"AdventureWorks_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AdventureWorks'"
		},
		"MergeDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MergeDB'"
		},
		"WWImporters_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'WWImporters'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AdvWorksBlobLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AdvWorksBlobLS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdventureWorks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AdventureWorks_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('MergeDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWImporters')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('WWImporters_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdvWorksBlobDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdvWorksBlobLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "advworkswwicontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AdvWorksBlobLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdventureWorksProducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorks",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "MakeFlag",
						"type": "bit"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nchar"
					},
					{
						"name": "Class",
						"type": "nchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					},
					{
						"name": "ProductSubcategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Production",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AdventureWorks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeDBClothes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MergeDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Clothes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MergeDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeDBProducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MergeDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MergeDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWImportersStockItems')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWImporters",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StockItemID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemName",
						"type": "nvarchar"
					},
					{
						"name": "SupplierID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ColorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OuterPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Brand",
						"type": "nvarchar"
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "LeadTimeDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QuantityPerOuter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsChillerStock",
						"type": "bit"
					},
					{
						"name": "Barcode",
						"type": "nvarchar"
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RecommendedRetailPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TypicalWeightPerUnit",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "MarketingComments",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "CustomFields",
						"type": "nvarchar"
					},
					{
						"name": "Tags",
						"type": "nvarchar"
					},
					{
						"name": "SearchDetails",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Warehouse",
					"table": "StockItems"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWImporters')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdvWorksWWIMergeDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AdventureWorksProducts",
								"type": "DatasetReference"
							},
							"name": "AdvWorksDBSource"
						},
						{
							"dataset": {
								"referenceName": "WWImportersStockItems",
								"type": "DatasetReference"
							},
							"name": "WWImportersDBSource"
						},
						{
							"dataset": {
								"referenceName": "WWImportersStockItems",
								"type": "DatasetReference"
							},
							"name": "WWImportersColorSource"
						},
						{
							"dataset": {
								"referenceName": "AdventureWorksProducts",
								"type": "DatasetReference"
							},
							"name": "AdvWorksCheckModel"
						},
						{
							"dataset": {
								"referenceName": "WWImportersStockItems",
								"type": "DatasetReference"
							},
							"name": "WWImportersGetInvoiceEvents"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MergeDBProducts",
								"type": "DatasetReference"
							},
							"name": "MergeDBProductSink"
						},
						{
							"dataset": {
								"referenceName": "MergeDBClothes",
								"type": "DatasetReference"
							},
							"name": "MergeDBClothesSink"
						},
						{
							"dataset": {
								"referenceName": "AdvWorksBlobDS",
								"type": "DatasetReference"
							},
							"name": "AdvWorksBlobSink"
						}
					],
					"transformations": [
						{
							"name": "SortByName"
						},
						{
							"name": "FilterDiscontinued"
						},
						{
							"name": "DeriveFinalCostandProductType"
						},
						{
							"name": "DeriveProductType"
						},
						{
							"name": "SelectAdvWorksColumns"
						},
						{
							"name": "SelectWWImporters"
						},
						{
							"name": "WWImportersColorsLookup"
						},
						{
							"name": "AdvWorksSplitClothesFromProducts"
						},
						{
							"name": "WWImportersSplitClothesFromProducts"
						},
						{
							"name": "CheckRepeatedClothes"
						},
						{
							"name": "UnionAllClothes"
						},
						{
							"name": "UnionAllProducts"
						},
						{
							"name": "JoinModel"
						},
						{
							"name": "AggregateByProductModelName"
						},
						{
							"name": "RankByAveragePrice"
						},
						{
							"name": "AddPKClothes"
						},
						{
							"name": "AddPKProducts"
						},
						{
							"name": "AllowOnlyProductUpserts"
						},
						{
							"name": "DerivedProfitability"
						},
						{
							"name": "WindowClothes"
						},
						{
							"name": "ParseJsonColumn"
						},
						{
							"name": "FlattenEvents"
						},
						{
							"name": "ParseJsonEvents"
						},
						{
							"name": "PivotEventDates"
						},
						{
							"name": "DeriveComplexSubcolumns"
						},
						{
							"name": "MapDriftedEventDates",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "UnPivotEventDates"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          MakeFlag as boolean,",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeUnitMeasureCode as string,",
						"          WeightUnitMeasureCode as string,",
						"          Weight as decimal(8,2),",
						"          DaysToManufacture as integer,",
						"          ProductLine as string,",
						"          Class as string,",
						"          Style as string,",
						"          ProductSubcategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> AdvWorksDBSource",
						"source(output(",
						"          StockItemID as integer,",
						"          StockItemName as string,",
						"          SupplierID as integer,",
						"          ColorID as integer,",
						"          UnitPackageID as integer,",
						"          OuterPackageID as integer,",
						"          Brand as string,",
						"          Size as string,",
						"          LeadTimeDays as integer,",
						"          QuantityPerOuter as integer,",
						"          IsChillerStock as boolean,",
						"          Barcode as string,",
						"          TaxRate as decimal(18,3),",
						"          UnitPrice as decimal(18,2),",
						"          RecommendedRetailPrice as decimal(18,2),",
						"          TypicalWeightPerUnit as decimal(18,3),",
						"          MarketingComments as string,",
						"          InternalComments as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          Tags as string,",
						"          SearchDetails as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> WWImportersDBSource",
						"source(output(",
						"          ColorID as integer,",
						"          Color as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT ColorID, ColorName as Color from Warehouse.Colors',",
						"     format: 'query') ~> WWImportersColorSource",
						"source(output(",
						"          ProductModelID as integer,",
						"          ProductModelName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT ProductModelID, Name as ProductModelName from Production.ProductModel',",
						"     format: 'query') ~> AdvWorksCheckModel",
						"source(output(",
						"          invoiceID as integer,",
						"          ReturnedDeliveryData as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT invoiceID, [ReturnedDeliveryData] FROM [Sales].[Invoices]',",
						"     format: 'query') ~> WWImportersGetInvoiceEvents",
						"WWImportersDBSource sort(asc(StockItemName, true),",
						"     caseInsensitive: true) ~> SortByName",
						"AdvWorksDBSource filter(isNull(SellEndDate)) ~> FilterDiscontinued",
						"SortByName derive(Cost = UnitPrice*(1+(TaxRate/100)),",
						"          ItemType = case(\r",
						"    in(['S','M','L','3XL','4XL','5XL','6XL','7XL','XS','XXS','XL','XXL'],Size)\r",
						"    ,'Clothing', 'Product'\r",
						")) ~> DeriveFinalCostandProductType",
						"SelectAdvWorksColumns derive(ItemType = case(\r",
						"    in(['S','M','L','XL'], Size)\r",
						"    ,'Clothing', 'Product'\r",
						")) ~> DeriveProductType",
						"JoinModel select(mapColumn(",
						"          Name,",
						"          Color,",
						"          Cost = StandardCost,",
						"          RetailPrice = ListPrice,",
						"          Size",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAdvWorksColumns",
						"WWImportersColorsLookup select(mapColumn(",
						"          Name = StockItemName,",
						"          Color,",
						"          Cost,",
						"          RetailPrice = RecommendedRetailPrice,",
						"          Size,",
						"          ItemType",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWWImporters",
						"DeriveFinalCostandProductType, WWImportersColorSource lookup(WWImportersDBSource@ColorID == WWImportersColorSource@ColorID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> WWImportersColorsLookup",
						"DeriveProductType split(ItemType == 'Product',",
						"     disjoint: false) ~> AdvWorksSplitClothesFromProducts@(AdvWorksProducts, AdvWorksClothing)",
						"SelectWWImporters split(ItemType == 'Product',",
						"     disjoint: false) ~> WWImportersSplitClothesFromProducts@(WWImportersProducts, WWImportersClothing)",
						"AdvWorksSplitClothesFromProducts@AdvWorksClothing, WWImportersSplitClothesFromProducts@WWImportersClothing exists(AdvWorksSplitClothesFromProducts@AdvWorksClothing@Name == WWImportersSplitClothesFromProducts@WWImportersClothing@Name,",
						"     negate:true,",
						"     broadcast: 'auto')~> CheckRepeatedClothes",
						"CheckRepeatedClothes, WWImportersSplitClothesFromProducts@WWImportersClothing union(byName: true)~> UnionAllClothes",
						"WWImportersSplitClothesFromProducts@WWImportersProducts, AdvWorksSplitClothesFromProducts@AdvWorksProducts union(byName: true)~> UnionAllProducts",
						"FilterDiscontinued, AdvWorksCheckModel join(AdvWorksDBSource@ProductModelID == AdvWorksCheckModel@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinModel",
						"JoinModel aggregate(groupBy(ProductModelName),",
						"     AverageCost = avg(StandardCost)) ~> AggregateByProductModelName",
						"AggregateByProductModelName rank(desc(AverageCost, true),",
						"     output(Rank as long),",
						"     dense: true) ~> RankByAveragePrice",
						"WindowClothes keyGenerate(output(ClothingID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddPKClothes",
						"UnionAllProducts keyGenerate(output(ProductID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddPKProducts",
						"AddPKProducts alterRow(upsertIf(true())) ~> AllowOnlyProductUpserts",
						"UnionAllClothes derive(Profitability = iif(Cost==0, toDecimal(0), RetailPrice/Cost)) ~> DerivedProfitability",
						"DerivedProfitability window(over(Size),",
						"     desc(Profitability, true),",
						"     Rank = denseRank()) ~> WindowClothes",
						"WWImportersGetInvoiceEvents parse(JsonData = ReturnedDeliveryData ? (ReceivedBy as string,",
						"          DeliveredWhen as date,",
						"          Events as string[]),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> ParseJsonColumn",
						"ParseJsonColumn foldDown(unroll(JsonData.Events),",
						"     mapColumn(",
						"          invoiceID,",
						"          ReceivedBy = JsonData.ReceivedBy,",
						"          DeliveredWhen = JsonData.DeliveredWhen,",
						"          Events = JsonData.Events",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenEvents",
						"FlattenEvents parse(EventDetails = Events ? (Event as string,",
						"          EventTime as date,",
						"          ConNote as string),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> ParseJsonEvents",
						"DeriveComplexSubcolumns pivot(groupBy(invoiceID,",
						"          ReceivedBy,",
						"          DeliveredWhen,",
						"          ConNoteCode),",
						"     pivotBy(EventName),",
						"     {} = first(EventTime),",
						"     columnNaming: 'Item_$N$V_Date',",
						"     lateral: false) ~> PivotEventDates",
						"ParseJsonEvents derive(EventName = EventDetails.Event,",
						"          EventTime = EventDetails.EventTime,",
						"          ConNoteCode = EventDetails.ConNote) ~> DeriveComplexSubcolumns",
						"PivotEventDates derive(Item_DeliveryAttempt_Date = toDate(byName('Item_DeliveryAttempt_Date')),",
						"          {Item_Ready for collection_Date} = toDate(byName('Item_Ready for collection_Date'))) ~> MapDriftedEventDates",
						"MapDriftedEventDates unpivot(output(",
						"          DeliveryEvent as string,",
						"          DeliveredWhen as date,",
						"          Item_DeliveryAttempt_Date as date,",
						"          {Item_Ready for collection_Date} as date",
						"     ),",
						"     ungroupBy(invoiceID,",
						"          ReceivedBy,",
						"          ConNoteCode),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnPivotEventDates",
						"AllowOnlyProductUpserts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Name'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MergeDBProductSink",
						"AddPKClothes sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MergeDBClothesSink",
						"RankByAveragePrice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['RankProductModelByCost.csv'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> AdvWorksBlobSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AdventureWorksProducts')]",
				"[concat(variables('factoryId'), '/datasets/WWImportersStockItems')]",
				"[concat(variables('factoryId'), '/datasets/MergeDBProducts')]",
				"[concat(variables('factoryId'), '/datasets/MergeDBClothes')]",
				"[concat(variables('factoryId'), '/datasets/AdvWorksBlobDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdvWorksWWiMergePL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AdvWorksWWIMergeDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AdvWorksWWIMergeDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AdvWorksDBSource": {},
									"WWImportersDBSource": {},
									"WWImportersColorSource": {},
									"AdvWorksCheckModel": {},
									"WWImportersGetInvoiceEvents": {},
									"MergeDBProductSink": {},
									"MergeDBClothesSink": {},
									"AdvWorksBlobSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AdvWorksWWIMergeDF')]"
			]
		}
	]
}